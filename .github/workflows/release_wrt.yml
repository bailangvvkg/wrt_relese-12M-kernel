name: Release WRT
run-name: Release - ${{ inputs.model }}

on:
  workflow_dispatch:
    inputs:
      model:
        required: true
        description: Device Model
        type: choice
        default: jdcloud_ipq60xx_libwrt
        options:
          - aliyun_ap8220_immwrt
          - cmcc_rax3000m_immwrt
          - jdcloud_ax6000_immwrt
          - jdcloud_ipq60xx_immwrt
          - jdcloud_ipq60xx_libwrt
          - n1_immwrt
          - redmi_ax5_immwrt
          - redmi_ax6_immwrt
          - redmi_ax6_libwrt
          - redmi_ax6000_immwrt21
          - zn_m2_immwrt
          - zn_m2_libwrt
          - x64_immwrt
      runs-on:
        required: true
        description: Runs on...
        type: choice
        default: ubuntu-22.04
        options:
          - ubuntu-20.04
          - ubuntu-22.04

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ${{ inputs.runs-on }}

    steps:
      # - name: Maximize build space
      #   uses: AdityaGarg8/remove-unwanted-software@v5
      #   with:
      #     remove-dotnet: "true"
      #     remove-android: "true"
      #     remove-haskell: "true"
      #     remove-codeql: "true"
      #     remove-docker-images: "true"
      #     remove-large-packages: "true"
      #     remove-cached-tools: "true"
      #     remove-swapfile: "true"

      - name: Check Server Performance(检查服务器性能)
        run: |
          echo "警告⚠"
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
          echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
          echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息："
          echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT
      
      - name: Free Disk Space(清理磁盘空间)
        uses: endersonmenezes/free-disk-space@main
        with:
          testing: false
          remove_android: true
          remove_dotnet: true
          remove_haskell: true
          remove_tool_cache: true
          remove_swap: true
          remove_packages: "android* azure* clang* dotnet* firefox* ghc* golang* google* libclang* libgl1* lld* llvm* \
            microsoft* mongodb* mono* mysql* nodejs* openjdk* php* postgresql* powershell* snap* temurin* yarn* zulu*"
          remove_packages_one_command: true
          remove_folders: "/etc/apt/sources.list.d* /etc/mono* /etc/mysql* /usr/include/linux/android* /usr/lib/llvm* /usr/lib/mono* \
            /usr/local/lib/android* /usr/local/lib/node_modules* /usr/local/share/chromium* /usr/local/share/powershell* \
            /usr/local/share/vcpkg/ports/azure* /usr/local/share/vcpkg/ports/google* /usr/local/share/vcpkg/ports/libpq/android* \
            /usr/local/share/vcpkg/ports/llvm* /usr/local/share/vcpkg/ports/mysql* /usr/local/share/vcpkg/ports/snap* \
            /usr/share/azure* /usr/share/dotnet* /usr/share/glade* /usr/share/miniconda* /usr/share/php* /usr/share/swift \
            /var/lib/mysql* /var/log/azure*"

      # - name: Checkout
      #   uses: actions/checkout@v4

      - name: Initialization Environment(安装依赖环境)
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E apt -yqq install dos2unix
          sudo -E apt -yqq install libfuse-dev
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Initialization Environment(安装依赖环境)
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt -yqq update
          sudo -E apt -yqq full-upgrade
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E apt -yqq install dos2unix libfuse-dev
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"

          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV

          # sudo mkdir -p /mnt/build_wrt
          # sudo chown $USER:$USER /mnt/build_wrt
          # sudo ln -s /mnt/build_wrt $GITHUB_WORKSPACE/wrt

      - name: Combine Disks(合并磁盘)
        uses: easimon/maximize-build-space@master
        with:
          swap-size-mb: 2048
          temp-reserve-mb: 100
          root-reserve-mb: 2048

      - name: Checkout Projects(拉取云编译仓库(本仓库)脚本)
        uses: actions/checkout@main

      - name: Initialization Values(初始化变量)
        run: |
          export BUILD_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          export BUILD_SRC=$(awk -F"=" '/REPO_URL/ {print $NF}' "./compilecfg/${{ inputs.model }}.ini")
          echo "BUILD_SRC=$BUILD_SRC" >> $GITHUB_ENV

          sudo mkdir -p $OPENWRT_PATH/build_wrt
          sudo chown $USER:$USER $OPENWRT_PATH/build_wrt
          sudo ln -s $OPENWRT_PATH/build_wrt $GITHUB_WORKSPACE/wrt

      - name: Pre Clone(拉取编译的固件源码)
        run: ./pre_clone_action.sh ${{ inputs.model }}

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ./action_build/.ccache
            ./action_build/staging_dir
          key: ${{ inputs.runs-on }}-${{ hashFiles('**/repo_flag') }}-${{ env.BUILD_DATE }}
          restore-keys: |
            ${{ inputs.runs-on }}-${{ hashFiles('**/repo_flag') }}-

      - name: Refresh the cache
        run: |
          if [ -d "./action_build/staging_dir" ]; then
            find "./action_build/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r dir; do
                find "$dir" -type f -exec touch {} +
            done
          fi

      - name: Build Firmware
        run: ./build.sh ${{ inputs.model }}

      - name: Get Kernel Verion
        run: |
          # 获取内核版本
          echo "KVER=$(find ./action_build/dl -maxdepth 1 -name "linux-[4-6]\.*" | sort -r | head -n 1 | grep -oE "[4-6]\.[0-9]{1,3}\.[0-9]{1,3}")" >> $GITHUB_ENV

      - name: Delete Old Cache
        run: |
          # 获取缓存列表并删除
          gh cache list --key ${{ inputs.runs-on }}-${{ hashFiles('**/repo_flag') }}- --json key --jq '.[] | .key' | while read -r key; do
            gh cache delete "$key"
          done
          # 输出缓存状态
          echo "========cache status========"
          echo "ccache: $(du -sh ./action_build/.ccache | cut -f 1)"
          echo "staging: $(du -sh ./action_build/staging_dir | cut -f 1)"

      - name: Machine Information
        run: |
          echo "=============================================="
          lscpu | grep -E "name|Core|Thread"
          echo "=============================================="
          df -h
          echo "=============================================="

      - name: Package OpenWrt Firmware
        if: ${{ inputs.model == 'n1_immwrt' }}
        uses: unifreq/openwrt_packit@master
        env:
          OPENWRT_ARMVIRT: firmware/*.tar.gz
          PACKAGE_SOC: s905d
          KERNEL_VERSION_NAME: 6.6.y
          WHOAMI: ZqinKing

      - name: Prepare Release Body
        run: |
          echo "云编译发布" > release_body.txt
          echo "源码：${{ env.BUILD_SRC }}" >> release_body.txt
          echo "Kernel: ${{ env.KVER }}" >> release_body.txt
          echo "WIFI密码: 12345678" >> release_body.txt
          echo "LAN地址: 192.168.1.1" >> release_body.txt
          echo "插件：" >> release_body.txt
          echo "$(grep -oP "luci-app(-[a-zA-Z0-9]{1,}){1,}" ./firmware/*.manifest | awk -F":" '{print $NF}')"  >> release_body.txt

      - name: Release Firmware
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.BUILD_DATE }}_${{ inputs.model }}
          files: ${{ inputs.model == 'n1_immwrt' && env.PACKAGED_OUTPUTPATH || './firmware' }}/*.*
          body_path: ./release_body.txt
